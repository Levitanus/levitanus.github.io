window.SIDEBAR_ITEMS = {"enum":[["ContextFromExtensionPluginError","An error which can occur when attempting to create a REAPER plug-in context from an extension plug-in."],["ContextFromVstPluginError","An error which can occur when attempting to create a REAPER plug-in context from a VST plug-in."],["TypeSpecificPluginContext","Additional stuff available in the plug-in context specific to a certain plug-in type."]],"fn":[["bootstrap_extension_plugin","This is a convenience function for bootstrapping extension plug-ins."],["copy_heap_buf_to_buf","Copies the content of the given heap buffer to the given output buffer (which must be sized correctly)."],["create_cpp_to_rust_control_surface","Creates an `IReaperControlSurface` object on C++ side and returns a pointer to it."],["create_cpp_to_rust_pcm_sink","Creates a `PCM_sink` object on C++ side and returns a pointer to it."],["create_cpp_to_rust_pcm_source","Creates a `PCM_source` object on C++ side and returns a pointer to it."],["create_cpp_to_rust_project_state_context","Creates a `ProjectStateContext` object on C++ side and returns a pointer to it."],["create_heap_buf","Creates a heap buffer and passes ownership to the caller."],["delete_cpp_control_surface","Destroys a C++ `IReaperControlSurface` object."],["delete_cpp_pcm_sink","Destroys a C++ `PCM_sink` object."],["delete_cpp_pcm_source","Destroys a C++ `PCM_source` object."],["delete_cpp_project_state_context","Destroys a C++ `ProjectStateContext` object."],["delete_cpp_reaper_pitch_shift","Destroys a C++ `IReaperPitchShift` object."],["delete_cpp_reaper_resample_interface","Destroys a C++ `REAPER_Resample_Interface` object."],["execute_plugin_destroy_hooks","This function executes all registered plug-in destroy hooks."],["firewall","This function catches panics before they reach REAPER."],["load_pcm_source_state_from_buf","Restores the PCM source state from the given buffer."],["register_hinstance","Registers the module handle globally."],["register_plugin_destroy_hook","Registers a function that will be executed when the plug-in module gets unloaded."],["register_swell_function_provider","Registers the given SWELL function provider globally."],["save_pcm_source_state_to_heap_buf","Saves the state of the given PCM source into the given heap buffer and returns the size of the data written into the buffer."],["static_extension_plugin_context","Exposes the (hopefully) obtained static extension plug-in context."],["static_vst_plugin_context","Exposes the (hopefully) obtained static VST plug-in context."]],"macro":[["reaper_vst_plugin","Macro which gathers things that go into the static REAPER VST plug-in context."]],"mod":[["raw","Exposes important raw types, functions and constants from the C++ REAPER API."]],"struct":[["ExtensionPluginContext","Additional data available in the context of extension plug-ins."],["PluginContext","This represents the context which is needed to access REAPER functions from plug-ins."],["Reaper","This is the low-level API access point to all REAPER functions."],["ReaperFunctionPointers","Container for the REAPER function pointers."],["StaticExtensionPluginContext","Contains those parts of the REAPER extension plug-in context which must be obtained from static variables."],["StaticVstPluginContext","Contains those parts of the REAPER VST plug-in context which must be obtained in static scope."],["Swell","This is the low-level API access point to all SWELL functions."],["SwellFunctionPointers","Container for the SWELL function pointers."],["VstPluginContext","Additional data available in the context of VST plug-ins."]],"trait":[["IReaperControlSurface","This is the Rust analog to the C++ virtual base class `IReaperControlSurface`."],["PCM_sink","This is the Rust analog to the C++ virtual base class `PCM_sink`."],["PCM_source","This is the Rust analog to the C++ virtual base class `PCM_source`."],["ProjectStateContext","This is the Rust analog to the C++ virtual base class `ProjectStateContext`."]]};